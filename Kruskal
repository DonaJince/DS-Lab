#include <stdio.h>
#include <stdlib.h>

// Structure to represent an edge
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find
struct Subset {
    int parent, rank;
};

// Function to find set of an element i
int find(struct Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

// Function that does union of two sets of x and y
void Union(struct Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Compare function for qsort to sort edges based on their weight
int compare(const void* a, const void* b) {
    return ((struct Edge*)a)->weight - ((struct Edge*)b)->weight;
}

// Function to perform Kruskal's algorithm
void Kruskal(struct Edge edges[], int V, int E) {
    // Allocate memory for subsets
    struct Subset* subsets = (struct Subset*)malloc(V * sizeof(struct Subset));

    // Create V subsets with single elements
    for (int v = 0; v < V; ++v) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Sort edges in ascending order by weight
    qsort(edges, E, sizeof(edges[0]), compare);

    // Initialize result
    struct Edge* result = (struct Edge*)malloc((V - 1) * sizeof(struct Edge));

    // Index used for result[]
    int i = 0;

    // Index used for sorted edges[]
    int e = 0;

    // Number of edges to be taken is V-1
    while (i < V - 1 && e < E) {
        // Pick the smallest edge and increment the index for next iteration
        struct Edge next_edge = edges[e++];

        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);

        // If including this edge doesn't cause a cycle, add it to the result
        if (x != y) {
            result[i++] = next_edge;
            Union(subsets, x, y);
        }
    }

    // Print the result
    printf("Edges in the MST:\n");
    for (i = 0; i < V - 1; ++i)
        printf("(%d, %d) Weight: %d\n", result[i].src, result[i].dest, result[i].weight);

    // Free allocated memory
    free(subsets);
    free(result);
}

// Driver program
int main() {
    int V = 4;  // Number of vertices in graph
    int E = 5;  // Number of edges in graph
    struct Edge edges[] = {{0, 1, 10}, {0, 2, 6}, {0, 3, 5}, {1, 3, 15}, {2, 3, 4}};

    Kruskal(edges, V, E);

    return 0;
}
